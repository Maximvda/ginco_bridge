/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ginco.proto */

#ifndef PROTOBUF_C_ginco_2eproto__INCLUDED
#define PROTOBUF_C_ginco_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ginco__Upgrade Ginco__Upgrade;
typedef struct _Ginco__Command Ginco__Command;
typedef struct _Ginco__Commands Ginco__Commands;


/* --- enums --- */


/* --- messages --- */

struct  _Ginco__Upgrade
{
  ProtobufCMessage base;
  uint32_t device_id;
  uint32_t image_size;
};
#define GINCO__UPGRADE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginco__upgrade__descriptor) \
    , 0, 0 }


typedef enum {
  GINCO__COMMAND__COMMAND__NOT_SET = 0,
  GINCO__COMMAND__COMMAND_UPGRADE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GINCO__COMMAND__COMMAND)
} Ginco__Command__CommandCase;

struct  _Ginco__Command
{
  ProtobufCMessage base;
  Ginco__Command__CommandCase command_case;
  union {
    Ginco__Upgrade *upgrade;
  };
};
#define GINCO__COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginco__command__descriptor) \
    , GINCO__COMMAND__COMMAND__NOT_SET, {0} }


struct  _Ginco__Commands
{
  ProtobufCMessage base;
  size_t n_commands;
  Ginco__Command **commands;
};
#define GINCO__COMMANDS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ginco__commands__descriptor) \
    , 0,NULL }


/* Ginco__Upgrade methods */
void   ginco__upgrade__init
                     (Ginco__Upgrade         *message);
size_t ginco__upgrade__get_packed_size
                     (const Ginco__Upgrade   *message);
size_t ginco__upgrade__pack
                     (const Ginco__Upgrade   *message,
                      uint8_t             *out);
size_t ginco__upgrade__pack_to_buffer
                     (const Ginco__Upgrade   *message,
                      ProtobufCBuffer     *buffer);
Ginco__Upgrade *
       ginco__upgrade__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginco__upgrade__free_unpacked
                     (Ginco__Upgrade *message,
                      ProtobufCAllocator *allocator);
/* Ginco__Command methods */
void   ginco__command__init
                     (Ginco__Command         *message);
size_t ginco__command__get_packed_size
                     (const Ginco__Command   *message);
size_t ginco__command__pack
                     (const Ginco__Command   *message,
                      uint8_t             *out);
size_t ginco__command__pack_to_buffer
                     (const Ginco__Command   *message,
                      ProtobufCBuffer     *buffer);
Ginco__Command *
       ginco__command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginco__command__free_unpacked
                     (Ginco__Command *message,
                      ProtobufCAllocator *allocator);
/* Ginco__Commands methods */
void   ginco__commands__init
                     (Ginco__Commands         *message);
size_t ginco__commands__get_packed_size
                     (const Ginco__Commands   *message);
size_t ginco__commands__pack
                     (const Ginco__Commands   *message,
                      uint8_t             *out);
size_t ginco__commands__pack_to_buffer
                     (const Ginco__Commands   *message,
                      ProtobufCBuffer     *buffer);
Ginco__Commands *
       ginco__commands__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ginco__commands__free_unpacked
                     (Ginco__Commands *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ginco__Upgrade_Closure)
                 (const Ginco__Upgrade *message,
                  void *closure_data);
typedef void (*Ginco__Command_Closure)
                 (const Ginco__Command *message,
                  void *closure_data);
typedef void (*Ginco__Commands_Closure)
                 (const Ginco__Commands *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ginco__upgrade__descriptor;
extern const ProtobufCMessageDescriptor ginco__command__descriptor;
extern const ProtobufCMessageDescriptor ginco__commands__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ginco_2eproto__INCLUDED */
